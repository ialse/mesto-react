{"version":3,"sources":["images/logo.svg","components/Header.js","contexts/CurrentUserContext.js","components/Card.js","components/Main.js","components/Footer.js","components/PopupWithImage.js","components/PopupHTML.js","components/PopupWithForm.js","contexts/StatePopup.js","components/EditProfilePopup.js","components/EditAvatarPopup.js","components/AddCardPopup.js","components/DelCardPopup.js","components/BlockAction.js","utils/api.js","utils/validators.js","components/App.js","reportWebVitals.js","index.js"],"names":["Header","className","src","logo","alt","CurrentUserContext","React","createContext","Card","memo","card","onCardClick","onCardLike","onCardDelete","currentUser","useContext","isOwn","_id","owner","cardButtonRemoveClassName","isLiked","likes","some","like","cardButtonLikeClassName","link","name","onClick","type","length","Main","onEditAvatar","onEditProfile","onAddPlace","cards","style","backgroundImage","avatar","about","map","Footer","PopupWithImage","onClose","popupRef","Object","keys","ref","noValidate","InputEditAvatar","onChange","avatarRef","error","id","placeholder","required","http","InputEditProfile","inputName","inputAbout","minLength","maxLength","value","InputAddCard","placeRef","linkRef","PopupWithForm","title","btnName","isOpen","onSubmit","children","isLoading","isInvalid","disabled","StatePopup","EditProfilePopup","onUpdateUser","onValidation","isEditProfilePopupOpen","useState","setName","description","setDescription","formValues","setFormValues","setError","setIsInvalid","useEffect","allErrors","e","preventDefault","target","prevState","EditAvatarPopup","onUpdateAvatar","isEditAvatarPopupOpen","useRef","current","AddCardPopup","isAddPlacePopupOpen","place","setPlace","setLink","DelCardPopup","onDelCard","BlockAction","isLoadingOpen","api","baseUrl","headers","this","_baseUrl","_headers","_errorServer","document","querySelector","res","ok","json","Promise","reject","Error","status","fetch","then","_getResponseData","method","body","JSON","stringify","action","err","textContent","classList","add","setTimeout","remove","authorization","validators","httpCheck","test","App","setCurrentUser","setIsEditAvatarPopupOpen","setIsEditProfilePopupOpen","setIsAddPlacePopupOpen","isDelCardPopupOpen","setIsDelCardPopupOpen","cardToDel","setCardToDel","selectedCard","setSelectedCard","setIsLoading","setIsLoadingOpen","setCards","editProfileRef","editAvatarRef","addCardRef","delCardRef","imageRef","handleValidation","inputValues","key","valueByKey","errors","entries","errorKey","validatorFn","reduce","acc","item","keyInput","keyCheck","closeAllPopups","all","getUserInfoFromServer","getInitialCards","data","userData","cardsData","catch","setErrorServer","popupStateContext","Provider","onKeyUp","changeLikeCardStatus","newCard","newCards","c","saveAvatarToServer","finally","saveUserInfoToServer","saveCardToServer","deleteCardToServer","filter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"6NAAe,MAA0B,iCCU1BA,MARf,WACI,OACI,wBAAQC,UAAU,SAAlB,SACI,qBAAKC,IAAKC,EAAMF,UAAU,eAAeG,IAAI,iFCH5CC,EAAqBC,IAAMC,gBCqCzBC,EApCFC,gBAAK,YAAsD,IAAnDC,EAAkD,EAAlDA,KAAMC,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,aAC1CC,EAAcC,qBAAWV,GAEzBW,EAAQF,EAAYG,MAAQP,EAAKQ,MAAMD,IACvCE,EAAyB,iCAA6BH,GAAS,iCAE/DI,EAAUV,EAAKW,MAAMC,MAAK,SAAAC,GAAI,OAAIA,EAAKN,MAAQH,EAAYG,OAC3DO,EAAuB,+BAA2BJ,GAAW,+BAEnE,OACI,0BAASnB,UAAU,UAAnB,UACI,qBACIA,UAAU,iBACVC,IAAKQ,EAAKe,KACVrB,IAAKM,EAAKgB,KACVC,QAAS,kBAAMhB,EAAYD,MAE/B,oBAAIT,UAAU,iBAAd,SAAgCS,EAAKgB,OACrC,sBAAKzB,UAAU,iBAAf,UACI,wBACI2B,KAAK,SACL3B,UAAWuB,EACXG,QAAS,kBAAMf,EAAWF,MAG9B,sBAAMT,UAAU,uBAAhB,SAAwCS,EAAKW,MAAMQ,YAEvD,wBACID,KAAK,SACL3B,UAAWkB,EACXQ,QAAS,kBAAMd,EAAaH,YCc7BoB,EA3CFrB,gBAAK,YAQX,IAPHsB,EAOE,EAPFA,aACAC,EAME,EANFA,cACAC,EAKE,EALFA,WACAC,EAIE,EAJFA,MACAvB,EAGE,EAHFA,YACAC,EAEE,EAFFA,WACAC,EACE,EADFA,aAGMC,EAAcC,qBAAWV,GAE/B,OACI,uBAAMJ,UAAU,UAAhB,UACI,0BAASA,UAAU,UAAnB,UACI,wBACIA,UAAU,kBACV0B,QAASI,EACTI,MAAO,CAAEC,gBAAgB,OAAD,OAAStB,EAAYuB,OAArB,QAE5B,sBAAKpC,UAAU,wBAAf,UACI,oBAAIA,UAAU,iBAAd,SAAgCa,EAAYY,OAC5C,wBAAQE,KAAK,SAAS3B,UAAU,uBAAuB0B,QAASK,IAChE,mBAAG/B,UAAU,oBAAb,SAAkCa,EAAYwB,WAElD,wBAAQV,KAAK,SAAS3B,UAAU,sBAAsB0B,QAASM,OAGnE,yBAAShC,UAAU,WAAnB,SACKiC,EAAMK,KAAI,SAAC7B,GAAD,OACP,cAAC,EAAD,CACIA,KAAMA,EAENC,YAAaA,EACbC,WAAYA,EACZC,aAAcA,GAHTH,EAAKO,gBC5BnBuB,MARf,WACI,OACI,wBAAQvC,UAAU,SAAlB,SACI,qBAAKA,UAAU,oBAAf,uCCWGwC,EAZQhC,gBAAK,YAAkC,IAA/BC,EAA8B,EAA9BA,KAAMgC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SAC5C,OACE,qBAAK1C,UAAS,4BAAuB2C,OAAOC,KAAKnC,GAAMmB,QAAU,gBAAkBiB,IAAKH,EAAxF,SACE,uBAAM1C,UAAU,0CAA0CyB,KAAK,eAAeqB,YAAU,EAAxF,UACE,qBAAK9C,UAAU,eAAeC,IAAKQ,EAAKe,KAAMrB,IAAKM,EAAKgB,OACxD,oBAAIzB,UAAU,wCAAd,SAAuDS,EAAKgB,OAC5D,wBAAQE,KAAK,SAAS3B,UAAU,mBAAmB0B,QAASe,YCNvDM,EAAkBvC,gBAAK,YAAqC,IAAlCwC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,MACxD,OACI,wBAAOlD,UAAU,eAAjB,UACI,uBAAO2B,KAAK,MAAM3B,UAAU,iCAAiCmD,GAAG,aAAa1B,KAAK,OAC9E2B,YAAY,mKAAiCP,IAAKI,EAAWD,SAAUA,IAC3E,sBAAMhD,UAAU,oCAAoCmD,GAAG,mBAAvD,SACMR,OAAOC,KAAKM,GAAOtB,QAAUsB,EAAM1B,KAAK6B,SAAY,sGACjDV,OAAOC,KAAKM,GAAOtB,QAAUsB,EAAM1B,KAAK8B,MAAQ,0DAMxDC,EAAmB/C,gBAAK,YAAiD,IAA9CgD,EAA6C,EAA7CA,UAAWC,EAAkC,EAAlCA,WAAYT,EAAsB,EAAtBA,SAAUE,EAAY,EAAZA,MACrE,OACI,qCACI,wBAAOlD,UAAU,eAAjB,UACI,uBAAO2B,KAAK,OAAO3B,UAAU,iCAAiCmD,GAAG,aAAaC,YAAY,qBAAM3B,KAAK,OACjGiC,UAAU,IAAIC,UAAU,KAAKC,MAAOJ,GAAa,GAAIR,SAAUA,IACnE,sBAAMhD,UAAU,oCAAoCmD,GAAG,mBAAvD,SACMR,OAAOC,KAAKM,GAAOtB,QAAUsB,EAAMzB,KAAK4B,SAAY,gJACjDV,OAAOC,KAAKM,GAAOtB,QAAUsB,EAAMzB,KAAKiC,WAAa,yMAGlE,wBAAO1D,UAAU,eAAjB,UACI,uBAAO2B,KAAK,OAAO3B,UAAU,iCAAiCmD,GAAG,aAAaC,YAAY,uCAAS3B,KAAK,QACpGiC,UAAU,IAAIC,UAAU,MAAMC,MAAOH,GAAc,GAAIT,SAAUA,IACrE,sBAAMhD,UAAU,oCAAoCmD,GAAG,mBAAvD,SACMR,OAAOC,KAAKM,GAAOtB,QAAUsB,EAAMb,MAAMgB,SAAY,sGAClDV,OAAOC,KAAKM,GAAOtB,QAAUsB,EAAMb,MAAMqB,WAAa,+MAOlEG,EAAerD,gBAAK,YAA6C,IAA1CwC,EAAyC,EAAzCA,SAAUE,EAA+B,EAA/BA,MAAOY,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QAC3D,OACI,qCACI,wBAAO/D,UAAU,eAAjB,UACI,uBAAO2B,KAAK,OAAO3B,UAAU,kCAAkCmD,GAAG,cAAc1B,KAAK,OAAO2B,YAAY,mDACpGM,UAAU,IAAIC,UAAU,KAAKX,SAAUA,EAAUH,IAAKiB,IAC1D,sBAAM9D,UAAU,oCAAoCmD,GAAG,oBAAvD,SACMR,OAAOC,KAAKM,GAAOtB,QAAUsB,EAAMzB,KAAK4B,SAAY,sGACjDV,OAAOC,KAAKM,GAAOtB,QAAUsB,EAAMzB,KAAKiC,WAAa,yMAGlE,wBAAO1D,UAAU,eAAjB,UACI,uBAAO2B,KAAK,MAAM3B,UAAU,iCAAiCmD,GAAG,aAAa1B,KAAK,OAC9E2B,YAAY,qGAAqBJ,SAAUA,EAAUH,IAAKkB,IAC9D,sBAAM/D,UAAU,oCAAoCmD,GAAG,mBAAvD,SACMR,OAAOC,KAAKM,GAAOtB,QAAUsB,EAAM1B,KAAK6B,SAAY,sGACjDV,OAAOC,KAAKM,GAAOtB,QAAUsB,EAAM1B,KAAK8B,MAAQ,6DC9B1DU,EAtBOxD,gBAAK,YAAoG,IAAjGiB,EAAgG,EAAhGA,KAAMwC,EAA0F,EAA1FA,MAAOC,EAAmF,EAAnFA,QAASC,EAA0E,EAA1EA,OAAQ1B,EAAkE,EAAlEA,QAAS2B,EAAyD,EAAzDA,SAAUC,EAA+C,EAA/CA,SAAUC,EAAqC,EAArCA,UAAWC,EAA0B,EAA1BA,UAAW7B,EAAe,EAAfA,SAC7G,OACE,qBAAK1C,UAAS,4BAAuByB,EAAvB,YAA+B0C,EAAS,eAAiB,IAAMtB,IAAKH,EAAlF,SACE,uBAAM1C,UAAU,cAAcyB,KAAI,sBAAiBA,GAAQqB,YAAU,EAACsB,SAAUA,EAAhF,UACE,oBAAIpE,UAAU,eAAd,SAA8BiE,IAC7BI,EACD,wBAAQ1C,KAAK,SAAS3B,UAAS,4BAAuBuE,EAAY,6BAA+B,IAAMC,SAAUD,EAAjH,SACGD,EACI,qBAAKtE,UAAU,YAChBkE,IAGN,wBACEvC,KAAK,SACL3B,UAAU,mBACV0B,QAASe,YCfNgC,EAAapE,IAAMC,gBC2FjBoE,EAvFUrE,IAAMG,MAAK,YAA2E,IAAxE2D,EAAuE,EAAvEA,OAAQ1B,EAA+D,EAA/DA,QAASkC,EAAsD,EAAtDA,aAAcL,EAAwC,EAAxCA,UAAWM,EAA6B,EAA7BA,aAAclC,EAAe,EAAfA,SAGnFmC,EAA2B/D,qBAAW2D,GAAtCI,uBAEFhE,EAAcC,qBAAWV,GAL2E,EAMlF0E,mBAAS,IANyE,mBAMnGrD,EANmG,KAM7FsD,EAN6F,OAOpED,mBAAS,IAP2D,mBAOnGE,EAPmG,KAOtFC,EAPsF,OAUtEH,mBAAS,CACzCrD,KAAM,GACNY,MAAO,KAZ+F,mBAUnG6C,EAVmG,KAUvFC,EAVuF,OAehFL,mBAAS,IAfuE,mBAenG5B,EAfmG,KAe5FkC,EAf4F,OAgBxEN,oBAAS,GAhB+D,mBAgBnGP,EAhBmG,KAgBxFc,EAhBwF,KAiE1G,OAvBAC,qBAAU,WACDT,GAIDE,EAAQlE,EAAYY,MACpBwD,EAAepE,EAAYwB,OAC3B8C,EAAc,CACV1D,KAAMZ,EAAYY,KAClBY,MAAOxB,EAAYwB,UAPvB0C,EAAQ,IACRE,EAAe,OAUpB,CAACJ,EAAwBhE,IAG5ByE,qBAAU,WAAO,IAAD,EACqBV,EAAaM,GAAtCK,EADI,EACJA,UAAWhB,EADP,EACOA,UACnBa,GAAS,WAAQ,OAAOG,KACxBF,EAAad,KAEd,CAACW,EAAYN,IAGZ,cAAC,EAAD,CACInD,KAAK,eACLwC,MAAM,4HACNC,QAAQ,yDACRC,OAAQA,EACR1B,QAASA,EACT2B,SArDR,SAAsBoB,GAClBA,EAAEC,iBAEFd,EAAa,CACTlD,OACAY,MAAO2C,KAiDPV,UAAWA,EACXC,UAAWA,EACX7B,SAAUA,EATd,SAWI,cAACa,EAAD,CACIC,UAAW/B,EACXgC,WAAYuB,EACZhC,SAnDZ,SAAsBwC,GAAI,IAAD,EAEGA,EAAEE,OAAlBjE,EAFa,EAEbA,KAAMmC,EAFO,EAEPA,MACduB,GAAc,SAACQ,GAAD,mBAAC,eAAoBA,GAArB,kBAAiClE,EAAOmC,OAIpC,SAAlB4B,EAAEE,OAAOjE,KACLsD,EAAQS,EAAEE,OAAO9B,OACjBqB,EAAeO,EAAEE,OAAO9B,QA2CpBV,MAAOA,SCPR0C,EA3ESpF,gBAAK,YAA6E,IAA1E2D,EAAyE,EAAzEA,OAAQ1B,EAAiE,EAAjEA,QAASoD,EAAwD,EAAxDA,eAAgBvB,EAAwC,EAAxCA,UAAWM,EAA6B,EAA7BA,aAAclC,EAAe,EAAfA,SAG9EoD,EAA0BhF,qBAAW2D,GAArCqB,sBACF7C,EAAY8C,mBAJmF,EAOjEjB,mBAAS,CACzCtD,KAAM,KAR2F,mBAO9F0D,EAP8F,KAOlFC,EAPkF,OAW3EL,mBAAS,IAXkE,mBAW9F5B,EAX8F,KAWvFkC,EAXuF,OAYnEN,oBAAS,GAZ0D,mBAY9FP,EAZ8F,KAYnFc,EAZmF,KAqDrG,OAfAC,qBAAU,WACFQ,IACA7C,EAAU+C,QAAQpC,MAAQ,MAE/B,CAACkC,IAGJR,qBAAU,WAAM,MAEqBV,EAAaM,GAAtCK,EAFI,EAEJA,UAAWhB,EAFP,EAEOA,UACnBa,GAAS,WAAQ,OAAOG,KACxBF,EAAad,KAEd,CAACW,EAAYN,IAGZ,cAAC,EAAD,CACInD,KAAK,cACLwC,MAAM,wFACNC,QAAQ,yDACRC,OAAQA,EACR1B,QAASA,EACT2B,SA7CR,SAAsBoB,GAClBA,EAAEC,iBACFI,EAAe,CACXrE,KAAMyB,EAAU+C,QAAQpC,QAI5BX,EAAU+C,QAAQpC,MAAQ,GAC1BuB,EAAc,CACV3D,KAAM,MAqCN8C,UAAWA,EACXC,UAAWA,EACX7B,SAAUA,EATd,SAWI,cAACK,EAAD,CACIE,UAAWA,EACXD,SAtCZ,SAAsBwC,GAAI,IAAD,EAEGA,EAAEE,OAAlBjE,EAFa,EAEbA,KAAMmC,EAFO,EAEPA,MACduB,GAAc,SAACQ,GAAD,mBAAC,eAAoBA,GAArB,kBAAiClE,EAAOmC,OAEtDX,EAAU+C,QAAQpC,MAAQ4B,EAAEE,OAAO9B,OAkC3BV,MAAOA,SCkBR+C,EAtFM5F,IAAMG,MAAK,YAAyE,IAAtE2D,EAAqE,EAArEA,OAAQ1B,EAA6D,EAA7DA,QAAST,EAAoD,EAApDA,WAAYsC,EAAwC,EAAxCA,UAAWM,EAA6B,EAA7BA,aAAclC,EAAe,EAAfA,SAG7EwD,EAAwBpF,qBAAW2D,GAAnCyB,oBAEFpC,EAAWiC,mBACXhC,EAAUgC,mBANoF,EAQ1EjB,mBAAS,IARiE,mBAQ7FqB,EAR6F,KAQtFC,EARsF,OAS5EtB,mBAAS,IATmE,mBAS7FtD,EAT6F,KASvF6E,EATuF,OAYhEvB,mBAAS,CACzCrD,KAAM,GACND,KAAM,KAd0F,mBAY7F0D,EAZ6F,KAYjFC,EAZiF,OAiB1EL,mBAAS,IAjBiE,mBAiB7F5B,EAjB6F,KAiBtFkC,EAjBsF,OAkBlEN,oBAAS,GAlByD,mBAkB7FP,EAlB6F,KAkBlFc,EAlBkF,KAgEpG,OArBAC,qBAAU,WAEFY,IACApC,EAASkC,QAAQpC,MAAQ,GACzBG,EAAQiC,QAAQpC,MAAQ,GACxBuB,EAAc,CACV1D,KAAM,GACND,KAAM,QAIf,CAAC0E,IAGJZ,qBAAU,WAAO,IAAD,EACqBV,EAAaM,GAAtCK,EADI,EACJA,UAAWhB,EADP,EACOA,UACnBa,GAAS,WAAQ,OAAOG,KACxBF,EAAad,KAEd,CAACW,EAAYN,IAGZ,cAAC,EAAD,CACInD,KAAK,WACLwC,MAAM,gEACNC,QAAQ,6CACRC,OAAQA,EACR1B,QAASA,EACT2B,SAlDR,SAA8BoB,GAC1BA,EAAEC,iBACFzD,EAAW,CACPP,KAAM0E,EACN3E,UA+CA8C,UAAWA,EACXC,UAAWA,EACX7B,SAAUA,EATd,SAWI,cAACmB,EAAD,CACIb,SA/CZ,SAAsBwC,GAAI,IAAD,EAEGA,EAAEE,OAAlBjE,EAFa,EAEbA,KAAMmC,EAFO,EAEPA,MACduB,GAAc,SAACQ,GAAD,mBAAC,eAAoBA,GAArB,kBAAiClE,EAAOmC,OAIpC,SAAlB4B,EAAEE,OAAOjE,KACL2E,EAASZ,EAAEE,OAAO9B,OAClByC,EAAQb,EAAEE,OAAO9B,QAuCbV,MAAOA,EACPY,SAAUA,EACVC,QAASA,SC3DVuC,EAvBMjG,IAAMG,MAAK,YAAgE,IAA7D2D,EAA4D,EAA5DA,OAAQ1B,EAAoD,EAApDA,QAAS8D,EAA2C,EAA3CA,UAAW9F,EAAgC,EAAhCA,KAAM6D,EAA0B,EAA1BA,UAAW5B,EAAe,EAAfA,SAO5E,OACI,cAAC,EAAD,CACIjB,KAAK,iBACLwC,MAAM,2DACNC,QAAQ,eACRC,OAAQA,EACR1B,QAASA,EACT2B,SAZR,SAAsBoB,GAClBA,EAAEC,iBACFc,EAAU9F,IAWN6D,UAAWA,EACX5B,SAAUA,OCVP8D,MATf,YAAyC,IAAlBC,EAAiB,EAAjBA,cACnB,OAEI,qBAAKzG,UAAU,mCAAf,SACKyG,GAAiB,qBAAKzG,UAAU,e,eCyFhC0G,EAAM,I,WA5Ff,cAAmC,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,QAAW,oBAC9BC,KAAKC,SAAWH,EAChBE,KAAKE,SAAWH,EAChBC,KAAKG,aAAeC,SAASC,cAAc,iB,6DAI9BC,GACb,OAAIA,EAAIC,GAAaD,EAAIE,OAClBC,QAAQC,OAAO,IAAIC,MAAJ,gDAAqBL,EAAIM,Y,wCAIhC,IAAD,OACd,OAAOC,MAAM,GAAD,OAAIb,KAAKC,SAAT,UAA2B,CAAEF,QAASC,KAAKE,WAClDY,MAAK,SAAAR,GAAS,OAAO,EAAKS,iBAAiBT,Q,0CAIlB,IAAD,OAAd1F,EAAc,EAAdA,KAAMD,EAAQ,EAARA,KACrB,OAAOkG,MAAM,GAAD,OAAIb,KAAKC,SAAT,UAA2B,CACnCF,QAASC,KAAKE,SACdc,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjBvG,KAAMA,EACND,KAAMA,MAGTmG,MAAK,SAACR,GAAU,OAAO,EAAKS,iBAAiBT,Q,yCAInC1G,GACf,OAAOiH,MAAM,GAAD,OAAIb,KAAKC,SAAT,kBAA2BrG,EAAKO,KAAO,CAC/C4F,QAASC,KAAKE,SACdc,OAAQ,a,2CAKKpH,EAAMU,GAAU,IAAD,OAC1B8G,EAAS9G,EAAU,SAAW,MAEpC,OAAOuG,MAAM,GAAD,OAAIb,KAAKC,SAAT,wBAAiCrG,EAAKO,KAAO,CACrD4F,QAASC,KAAKE,SACdc,OAAQI,IAEPN,MAAK,SAACR,GAAU,OAAO,EAAKS,iBAAiBT,Q,4CAIxB,IAAD,OAAR3F,EAAQ,EAARA,KACjB,OAAOkG,MAAM,GAAD,OAAIb,KAAKC,SAAT,oBAAqC,CAC7CF,QAASC,KAAKE,SACdc,OAAQ,QACRC,KAAMC,KAAKC,UAAU,CACjB5F,OAAQZ,MAGXmG,MAAK,SAACR,GAAU,OAAO,EAAKS,iBAAiBT,Q,8CAI7B,IAAD,OACpB,OAAOO,MAAM,GAAD,OAAIb,KAAKC,SAAT,aAA8B,CAAEF,QAASC,KAAKE,WACrDY,MAAK,SAAAR,GAAS,OAAO,EAAKS,iBAAiBT,Q,8CAIb,IAAD,OAAf1F,EAAe,EAAfA,KAAMY,EAAS,EAATA,MACzB,OAAOqF,MAAM,GAAD,OAAIb,KAAKC,SAAT,aAA8B,CACtCF,QAASC,KAAKE,SACdc,OAAQ,QACRC,KAAMC,KAAKC,UAAU,CACjBvG,KAAMA,EACNY,MAAOA,MAGVsF,MAAK,SAAAR,GAAS,OAAO,EAAKS,iBAAiBT,Q,qCAIrCe,GAAM,IAAD,OAChBrB,KAAKG,aAAamB,YAAlB,wLAAqED,EAArE,wJAEArB,KAAKG,aAAaoB,UAAUC,IAAI,uBAChCC,YAAW,WACP,EAAKtB,aAAaoB,UAAUG,OAAO,yBACpC,S,KAIQ,CAAQ,CACvB5B,QAAS,8CACTC,QAAS,CACL4B,cAAe,uCACf,eAAgB,sBChGXC,EAAa,CACtBhH,KAAM,CACF4B,SAAU,SAACO,GAAY,MAAiB,KAAVA,GAC9BF,UAAW,SAACE,GAAY,OAAOA,EAAMhC,OAAS,IAElDS,MAAO,CACHgB,SAAU,SAACO,GAAY,MAAiB,KAAVA,GAC9BF,UAAW,SAACE,GAAY,OAAOA,EAAMhC,OAAS,IAElDJ,KAAM,CACF6B,SAAU,SAACO,GAAY,MAAiB,KAAVA,GAC9BN,KAAM,SAACM,GAAY,OAAO8E,EAAU9E,KAExCxB,OAAQ,CACJiB,SAAU,SAACO,GAAY,MAAiB,KAAVA,GAC9BN,KAAM,SAACM,GAAY,OAAO8E,EAAU9E,MAI5C,SAAS8E,EAAU9E,GACf,OAAS,+DAAgE+E,KAAK/E,GC+QnEgF,MApRf,WAAe,MAEyB9D,mBAAS,IAFlC,mBAENjE,EAFM,KAEOgI,EAFP,OAI6C/D,oBAAS,GAJtD,mBAINgB,EAJM,KAIiBgD,EAJjB,OAK+ChE,oBAAS,GALxD,mBAKND,EALM,KAKkBkE,EALlB,OAMyCjE,oBAAS,GANlD,mBAMNoB,EANM,KAMe8C,EANf,OAOuClE,oBAAS,GAPhD,mBAONmE,EAPM,KAOcC,EAPd,OASqBpE,mBAAS,IAT9B,mBASNqE,EATM,KASKC,EATL,OAU2BtE,mBAAS,IAVpC,mBAUNuE,EAVM,KAUQC,EAVR,OAWqBxE,oBAAS,GAX9B,mBAWNR,EAXM,KAWKiF,EAXL,OAY6BzE,oBAAS,GAZtC,mBAYN2B,EAZM,KAYS+C,GAZT,QAea1E,mBAAS,IAftB,qBAeN7C,GAfM,MAeCwH,GAfD,MAkBPC,GAAiB3D,mBACjB4D,GAAgB5D,mBAChB6D,GAAa7D,mBACb8D,GAAa9D,mBACb+D,GAAW/D,mBAGjB,SAASgE,GAAiBC,GAGxB,IACMzE,EADW5C,OAAOC,KAAKoH,GACF1H,KAAI,SAAC2H,GAC9B,IAAMC,EAAaF,EAAYC,GAE/B,IAAKxB,EAAWwB,GAAM,MAAO,GAE7B,IAAME,EAASxH,OAAOyH,QAAQ3B,EAAWwB,IAAM3H,KAAI,YAA8B,IAAD,mBAA3B+H,EAA2B,KAAjBC,EAAiB,KAE9E,OAAO,eAAGD,EAAWC,EAAYJ,OAChCK,QAAO,SAACC,EAAKC,GAAN,mBAAC,eAAoBD,GAAQC,KAAS,IAEhD,OAAO,eAAGR,EAAME,MACfI,QAAO,SAACC,EAAKC,GAAN,mBAAC,eAAoBD,GAAQC,KAAS,IAG5ClG,GAAY,EAChB,IAAK,IAAMmG,KAAYnF,EACrB,IAAK,IAAMoF,KAAYpF,EAAUmF,GAC/B,GAAInF,EAAUmF,GAAUC,GAAW,CACjCpG,GAAY,EACZ,MAKN,MAAO,CAAEgB,YAAWhB,aAkItB,SAASqG,KACP9B,GAAyB,GACzBC,GAA0B,GAC1BC,GAAuB,GACvBE,GAAsB,GACtBI,EAAgB,IAnIlBhE,qBAAU,WACRkE,IAAiB,GACjBlC,QAAQuD,IAAI,CACVnE,EAAIoE,wBACJpE,EAAIqE,oBAEHpD,MAAK,SAACqD,GAAU,IAAD,cACgBA,EADhB,GACPC,EADO,KACGC,EADH,KAEdrC,EAAeoC,GACfxB,GAASyB,GACT1B,IAAiB,MAElB2B,OAAM,SAACjD,GAAUxB,EAAI0E,eAAelD,QACtC,IA0HH,IAAMmD,GAAoB,CACxBxG,yBACAiB,wBACAI,uBAGF,OAEE,aADA,CACCzB,EAAW6G,SAAZ,CAAqB1H,MAAOyH,GAA5B,SACE,cAACjL,EAAmBkL,SAApB,CAA6B1H,MAAO/C,EAApC,SACE,sBAAKb,UAAU,OAAOuL,QAtC5B,SAAmB/F,GACH,WAAVA,EAAEyE,KACJW,MAoC4ClJ,QA/BhD,SAA4B8D,GAExBA,EAAEE,SAAWgE,GAAe1D,SAC5BR,EAAEE,SAAWiE,GAAc3D,SAC3BR,EAAEE,SAAWkE,GAAW5D,SACxBR,EAAEE,SAAWmE,GAAW7D,SACxBR,EAAEE,SAAWoE,GAAS9D,SACtB4E,MAwBE,UACE,cAAC,EAAD,IAGA,cAAC,EAAD,CACE7I,cA7DV,WACEgH,GAA0B,IA6DlBjH,aAlEV,WACEgH,GAAyB,IAkEjB9G,WA3DV,WACEgH,GAAuB,IA2DftI,YAnDV,SAAyBD,GACvB6I,EAAgB7I,IAmDRwB,MAAOA,GACPtB,WA3IV,SAAwBF,GAEtB,IAAMU,EAAUV,EAAKW,MAAMC,MAAK,SAAAC,GAAI,OAAIA,EAAKN,MAAQH,EAAYG,OAGjE0F,EAAI8E,qBAAqB/K,EAAMU,GAC5BwG,MAAK,SAAC8D,GAEL,IAAMC,EAAWzJ,GAAMK,KAAI,SAACqJ,GAAD,OAAOA,EAAE3K,MAAQP,EAAKO,IAAMyK,EAAUE,KACjElC,GAASiC,MAEVP,OAAM,SAACjD,GAAUxB,EAAI0E,eAAelD,OAiI/BtH,aA3DV,SAA4BH,GAC1ByI,GAAsB,GACtBE,EAAa3I,IA0DL6D,UAAWA,IAGb,cAAC,EAAD,IAGA,cAAC,EAAD,CACEH,OAAQ2B,EACRrD,QAASmI,GACT/E,eAzGV,SAA4BzD,GAC1BmH,GAAa,GACb7C,EAAIkF,mBAAmBxJ,GACpBuF,MAAK,SAACsD,GAAepC,EAAeoC,MACpCE,OAAM,SAACjD,GAAUxB,EAAI0E,eAAelD,MACpC2D,SAAQ,WACPtC,GAAa,GACbqB,SAmGItG,UAAWA,EACXM,aAAcmF,GACdrH,SAAUiH,KAIZ,cAAC,EAAD,CACExF,OAAQU,EACRpC,QAASmI,GACTjG,aA/HV,SAA0BqF,GACxBT,GAAa,GACb7C,EAAIoF,qBAAqB9B,GACtBrC,MAAK,SAACsD,GAAepC,EAAeoC,MACpCE,OAAM,SAACjD,GAAUxB,EAAI0E,eAAelD,MACpC2D,SAAQ,WACPtC,GAAa,GACbqB,SAyHItG,UAAWA,EACXM,aAAcmF,GACdrH,SAAUgH,KAIZ,cAAC,EAAD,CACEvF,OAAQ+B,EACRzD,QAASmI,GACT5I,WAjHV,SAAwByJ,GACtBlC,GAAa,GACb7C,EAAIqF,iBAAiBN,GAClB9D,MAAK,SAAC8D,GAAchC,GAAS,CAACgC,GAAF,mBAAcxJ,SAC1CkJ,OAAM,SAACjD,GAAUxB,EAAI0E,eAAelD,MACpC2D,SAAQ,WACPtC,GAAa,GACbqB,SA2GItG,UAAWA,EACXM,aAAcmF,GACdrH,SAAUkH,KAIZ,cAAC,EAAD,CACEzF,OAAQ8E,EACRxG,QAASmI,GACTrE,UArKV,SAA0B4C,GACxBI,GAAa,GAEb7C,EAAIsF,mBAAmB7C,GACpBxB,MAAK,WAGJ,IAAM+D,EAAWzJ,GAAMgK,QAAO,SAACN,GAAD,OAAOA,EAAE3K,MAAQmI,EAAUnI,KAAO2K,KAChElC,GAASiC,MAEVP,OAAM,SAACjD,GAAUxB,EAAI0E,eAAelD,MACpC2D,SAAQ,WACPtC,GAAa,GACbqB,SAyJInK,KAAM0I,EACN7E,UAAWA,EACX5B,SAAUmH,KAKZ,cAAC,EAAD,CACEpJ,KAAM4I,EACN5G,QAASmI,GACTlI,SAAUoH,MAIVrD,GAAiBnC,IAAc,cAAC,EAAD,CAAamC,cAAeA,YChRxDyF,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzE,MAAK,YAAkD,IAA/C0E,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3F,SAAS4F,eAAe,SAG1BX,M","file":"static/js/main.484dfb35.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.c2821b38.svg\";","import logo from '../images/logo.svg';\r\n\r\nfunction Header() {\r\n    return (\r\n        <header className=\"header\">\r\n            <img src={logo} className=\"header__logo\" alt=\"Логотип Место\" />\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nexport const CurrentUserContext = React.createContext();","import React, { useContext, memo } from 'react';\r\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\r\n\r\nconst Card = memo(({ card, onCardClick, onCardLike, onCardDelete }) => {\r\n    const currentUser = useContext(CurrentUserContext);\r\n\r\n    const isOwn = currentUser._id === card.owner._id;\r\n    const cardButtonRemoveClassName = `element__button-remove ${isOwn && 'element__button-remove_active'}`;\r\n\r\n    const isLiked = card.likes.some(like => like._id === currentUser._id);\r\n    const cardButtonLikeClassName = `element__button-like ${isLiked && 'element__button-like_active'}`;\r\n\r\n    return (\r\n        <article className=\"element\">\r\n            <img\r\n                className=\"element__image\"\r\n                src={card.link}\r\n                alt={card.name}\r\n                onClick={() => onCardClick(card)}\r\n            />\r\n            <h2 className=\"element__title\">{card.name}</h2>\r\n            <div className=\"element__likes\">\r\n                <button\r\n                    type=\"button\"\r\n                    className={cardButtonLikeClassName}\r\n                    onClick={() => onCardLike(card)}\r\n                ></button>\r\n\r\n                <span className=\"element__likes-count\">{card.likes.length}</span>\r\n            </div>\r\n            <button\r\n                type=\"button\"\r\n                className={cardButtonRemoveClassName}\r\n                onClick={() => onCardDelete(card)}\r\n            ></button>\r\n        </article>\r\n    );\r\n});\r\n\r\nexport default Card;","import React, { useContext, memo } from 'react';\r\nimport Card from './Card.js';\r\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\r\n\r\nconst Main = memo(({\r\n    onEditAvatar,\r\n    onEditProfile,\r\n    onAddPlace,\r\n    cards,\r\n    onCardClick,\r\n    onCardLike,\r\n    onCardDelete\r\n}) => {\r\n\r\n    const currentUser = useContext(CurrentUserContext); //Подписываемся на контекст\r\n\r\n    return (\r\n        <main className=\"content\">\r\n            <section className=\"profile\">\r\n                <button\r\n                    className=\"profile__avatar\"\r\n                    onClick={onEditAvatar}\r\n                    style={{ backgroundImage: `url(${currentUser.avatar})` }}>\r\n                </button>\r\n                <div className=\"profile__profile-info\">\r\n                    <h1 className=\"profile__title\">{currentUser.name}</h1>\r\n                    <button type=\"button\" className=\"profile__button-edit\" onClick={onEditProfile}></button>\r\n                    <p className=\"profile__subtitle\">{currentUser.about}</p>\r\n                </div>\r\n                <button type=\"button\" className=\"profile__button-add\" onClick={onAddPlace}></button>\r\n            </section>\r\n\r\n            <section className=\"elements\">\r\n                {cards.map((card) => (\r\n                    <Card\r\n                        card={card}\r\n                        key={card._id}\r\n                        onCardClick={onCardClick}\r\n                        onCardLike={onCardLike}\r\n                        onCardDelete={onCardDelete}\r\n                    />\r\n                ))}\r\n            </section>\r\n        </main>\r\n    );\r\n});\r\n\r\nexport default Main;","function Footer() {\r\n    return (\r\n        <footer className=\"footer\">\r\n            <div className=\"footer__copyright\">&copy; 2020 Mesto Russia</div>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React, { memo } from 'react';\r\n\r\nconst PopupWithImage = memo(({ card, onClose, popupRef }) => {\r\n  return (\r\n    <div className={`popup popup_image ${Object.keys(card).length && 'popup_opened'}`} ref={popupRef}>\r\n      <form className=\"popup__container popup__container_image\" name=\"popup__image\" noValidate>\r\n        <img className=\"popup__image\" src={card.link} alt={card.name} />\r\n        <h2 className=\"popup__title popup__title_popup-image\">{card.name}</h2>\r\n        <button type=\"button\" className=\"popup__btn-close\" onClick={onClose}></button>\r\n      </form>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default PopupWithImage;\r\n","import React, { memo } from 'react';\r\n\r\nexport const InputEditAvatar = memo(({ onChange, avatarRef, error }) => {\r\n    return (\r\n        <label className=\"popup__field\">\r\n            <input type=\"url\" className=\"popup__input popup__input_link\" id=\"link-input\" name=\"link\"\r\n                placeholder=\"Ссылка на картинку для аватара\" ref={avatarRef} onChange={onChange} />\r\n            <span className=\"popup__error popup__error_visible\" id=\"link-input-error\">\r\n                {(Object.keys(error).length && error.link.required && 'Заполните это поле.') ||\r\n                    (Object.keys(error).length && error.link.http && 'Введите URL.')}\r\n            </span>\r\n        </label>\r\n    );\r\n});\r\n\r\nexport const InputEditProfile = memo(({ inputName, inputAbout, onChange, error }) => {\r\n    return (\r\n        <>\r\n            <label className=\"popup__field\">\r\n                <input type=\"text\" className=\"popup__input popup__input_name\" id=\"name-input\" placeholder=\"Имя\" name=\"name\"\r\n                    minLength=\"2\" maxLength=\"40\" value={inputName || \"\"} onChange={onChange} />\r\n                <span className=\"popup__error popup__error_visible\" id=\"name-input-error\">\r\n                    {(Object.keys(error).length && error.name.required && 'Поле должно быть заполнено') ||\r\n                        (Object.keys(error).length && error.name.minLength && 'Текст должен быть не короче 2 символов')}\r\n                </span>\r\n            </label>\r\n            <label className=\"popup__field\">\r\n                <input type=\"text\" className=\"popup__input popup__input_work\" id=\"work-input\" placeholder=\"Работа\" name=\"about\"\r\n                    minLength=\"2\" maxLength=\"200\" value={inputAbout || \"\"} onChange={onChange} />\r\n                <span className='popup__error popup__error_visible' id=\"work-input-error\">\r\n                    {(Object.keys(error).length && error.about.required && 'Заполните это поле.') ||\r\n                        (Object.keys(error).length && error.about.minLength && 'Текст должен быть не короче 2 символов')}\r\n                </span>\r\n            </label>\r\n        </>\r\n    );\r\n});\r\n\r\nexport const InputAddCard = memo(({ onChange, error, placeRef, linkRef }) => {\r\n    return (\r\n        <>\r\n            <label className=\"popup__field\">\r\n                <input type=\"text\" className=\"popup__input popup__input_place\" id=\"title-input\" name=\"name\" placeholder=\"Название\"\r\n                    minLength=\"1\" maxLength=\"30\" onChange={onChange} ref={placeRef} />\r\n                <span className=\"popup__error popup__error_visible\" id=\"title-input-error\">\r\n                    {(Object.keys(error).length && error.name.required && 'Заполните это поле.') ||\r\n                        (Object.keys(error).length && error.name.minLength && 'Текст должен быть не короче 2 символов')}\r\n                </span>\r\n            </label>\r\n            <label className=\"popup__field\">\r\n                <input type=\"url\" className=\"popup__input popup__input_link\" id=\"link-input\" name=\"link\"\r\n                    placeholder=\"Ссылка на картинку\" onChange={onChange} ref={linkRef} />\r\n                <span className=\"popup__error popup__error_visible\" id=\"link-input-error\">\r\n                    {(Object.keys(error).length && error.link.required && 'Заполните это поле.') ||\r\n                        (Object.keys(error).length && error.link.http && 'Введите URL.')}\r\n                </span>\r\n            </label>\r\n        </>\r\n    );\r\n});","import React, { memo } from 'react';\r\n\r\nconst PopupWithForm = memo(({ name, title, btnName, isOpen, onClose, onSubmit, children, isLoading, isInvalid, popupRef }) => {\r\n  return (\r\n    <div className={`popup popup__form_${name} ${isOpen ? 'popup_opened' : ''}`} ref={popupRef}>\r\n      <form className=\"popup__form\" name={`popup__form_${name}`} noValidate onSubmit={onSubmit} >\r\n        <h2 className=\"popup__title\">{title}</h2>\r\n        {children}\r\n        <button type=\"submit\" className={`popup__btn-submit ${isInvalid ? 'popup__btn-submit_disabled' : ''}`} disabled={isInvalid}>\r\n          {isLoading\r\n            ? (<div className='spinner'></div >)\r\n            : btnName\r\n          }\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"popup__btn-close\"\r\n          onClick={onClose}>\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default PopupWithForm;\r\n\r\n","import React from 'react';\r\n\r\nexport const StatePopup = React.createContext();","import React, { useState, useContext, useEffect } from 'react';\r\nimport { InputEditProfile } from './PopupHTML';\r\nimport PopupWithForm from './PopupWithForm';\r\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\r\nimport { StatePopup } from '../contexts/StatePopup';\r\n\r\nconst EditProfilePopup = React.memo(({ isOpen, onClose, onUpdateUser, isLoading, onValidation, popupRef }) => {\r\n\r\n    // Использую контекст, чтобы понимать когда попап закрывают и очищать поля\r\n    const { isEditProfilePopupOpen } = useContext(StatePopup);\r\n\r\n    const currentUser = useContext(CurrentUserContext);\r\n    const [name, setName] = useState('');\r\n    const [description, setDescription] = useState('');\r\n\r\n    // Стейты для валидации полей\r\n    const [formValues, setFormValues] = useState({\r\n        name: '',\r\n        about: ''\r\n    });\r\n\r\n    const [error, setError] = useState({});\r\n    const [isInvalid, setIsInvalid] = useState(true);\r\n\r\n    // Обработчик нажатия кнопки Сохранить\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        onUpdateUser({\r\n            name,\r\n            about: description\r\n        });\r\n    }\r\n\r\n    // Обработчик ввода данных в поля\r\n    function handleChange(e) {\r\n\r\n        const { name, value } = e.target;\r\n        setFormValues((prevState) => ({ ...prevState, [name]: value }));\r\n\r\n        // если аттрибут name имеет значение name, то устанавливаем setName\r\n        // иначе setDescription\r\n        e.target.name === \"name\" ?\r\n            setName(e.target.value) :\r\n            setDescription(e.target.value);\r\n    }\r\n\r\n    // Если попап закрыли, то очищаем поля, если открыли, устанавливаем\r\n    useEffect(() => {\r\n        if (!isEditProfilePopupOpen) {\r\n            setName('');\r\n            setDescription('');\r\n        } else {\r\n            setName(currentUser.name);\r\n            setDescription(currentUser.about);\r\n            setFormValues({\r\n                name: currentUser.name,\r\n                about: currentUser.about\r\n            });\r\n        }\r\n\r\n    }, [isEditProfilePopupOpen, currentUser]);\r\n\r\n    // Вызов валидации полей при каждом изменении formValues\r\n    useEffect(() => {\r\n        const { allErrors, isInvalid } = onValidation(formValues);\r\n        setError(() => { return allErrors });\r\n        setIsInvalid(isInvalid); // установка состояния кнопки\r\n\r\n    }, [formValues, onValidation]);\r\n\r\n    return (\r\n        <PopupWithForm\r\n            name=\"edit-profile\"\r\n            title=\"Редактировать профиль\"\r\n            btnName=\"Сохранить\"\r\n            isOpen={isOpen}\r\n            onClose={onClose}\r\n            onSubmit={handleSubmit}\r\n            isLoading={isLoading}\r\n            isInvalid={isInvalid}\r\n            popupRef={popupRef}\r\n        >\r\n            <InputEditProfile\r\n                inputName={name}\r\n                inputAbout={description}\r\n                onChange={handleChange}\r\n                error={error}\r\n            />\r\n        </PopupWithForm>\r\n    );\r\n});\r\n\r\nexport default EditProfilePopup;","import React, { useState, useEffect, useRef, useContext, memo } from 'react';\r\nimport { InputEditAvatar } from './PopupHTML';\r\nimport PopupWithForm from './PopupWithForm';\r\nimport { StatePopup } from '../contexts/StatePopup';\r\n\r\nconst EditAvatarPopup = memo(({ isOpen, onClose, onUpdateAvatar, isLoading, onValidation, popupRef }) => {\r\n\r\n    // Использую контекст, чтобы понимать когда попап закрывают и очищать поля\r\n    const { isEditAvatarPopupOpen } = useContext(StatePopup);\r\n    const avatarRef = useRef();\r\n\r\n    // Стейты для валидации полей\r\n    const [formValues, setFormValues] = useState({\r\n        link: ''\r\n    });\r\n\r\n    const [error, setError] = useState({});\r\n    const [isInvalid, setIsInvalid] = useState(true);\r\n\r\n    // Обработчик ввода данных в поля\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        onUpdateAvatar({\r\n            link: avatarRef.current.value /* Значение инпута, полученное с помощью рефа */\r\n        });\r\n\r\n        // очищаю поле после нажатия Сохранить\r\n        avatarRef.current.value = '';\r\n        setFormValues({\r\n            link: ''\r\n        });\r\n    }\r\n\r\n    // Обработчик ввода данных в поля\r\n    function handleChange(e) {\r\n\r\n        const { name, value } = e.target;\r\n        setFormValues((prevState) => ({ ...prevState, [name]: value }));\r\n        //обновляем значение поля после каждого ввода символа\r\n        avatarRef.current.value = e.target.value;\r\n    }\r\n\r\n    // Если попап закрыли, то очищаем поля, если открыли, устанавливаем\r\n    useEffect(() => {\r\n        if (isEditAvatarPopupOpen) {\r\n            avatarRef.current.value = '';\r\n        }\r\n    }, [isEditAvatarPopupOpen]);\r\n\r\n    // Валидируем при каждом измении данных в полях, formValues\r\n    useEffect(() => {\r\n        // в res должен вернуться результат валидации и текст ошибки\r\n        const { allErrors, isInvalid } = onValidation(formValues);\r\n        setError(() => { return allErrors });\r\n        setIsInvalid(isInvalid);\r\n\r\n    }, [formValues, onValidation]);\r\n\r\n    return (\r\n        <PopupWithForm\r\n            name=\"edit-avatar\"\r\n            title=\"Обновить аватар\"\r\n            btnName=\"Сохранить\"\r\n            isOpen={isOpen}\r\n            onClose={onClose}\r\n            onSubmit={handleSubmit}\r\n            isLoading={isLoading}\r\n            isInvalid={isInvalid}\r\n            popupRef={popupRef}\r\n        >\r\n            <InputEditAvatar\r\n                avatarRef={avatarRef}\r\n                onChange={handleChange}\r\n                error={error}\r\n            />\r\n        </PopupWithForm>\r\n    );\r\n}\r\n);\r\n\r\nexport default EditAvatarPopup;","import React, { useState, useEffect, useContext, useRef } from 'react';\r\nimport { InputAddCard } from './PopupHTML';\r\nimport PopupWithForm from './PopupWithForm';\r\nimport { StatePopup } from '../contexts/StatePopup';\r\n\r\nconst AddCardPopup = React.memo(({ isOpen, onClose, onAddPlace, isLoading, onValidation, popupRef }) => {\r\n\r\n    // Использую контекст, чтобы понимать когда попап закрывают и очищать поля\r\n    const { isAddPlacePopupOpen } = useContext(StatePopup);\r\n\r\n    const placeRef = useRef();\r\n    const linkRef = useRef();\r\n\r\n    const [place, setPlace] = useState('');\r\n    const [link, setLink] = useState('');\r\n\r\n    // Стейты для валидации полей\r\n    const [formValues, setFormValues] = useState({\r\n        name: '',\r\n        link: ''\r\n    });\r\n\r\n    const [error, setError] = useState({});\r\n    const [isInvalid, setIsInvalid] = useState(true);\r\n\r\n    // Обработчик нажатия кнопки Создать\r\n    function handleAddPlaceSubmit(e) {\r\n        e.preventDefault();\r\n        onAddPlace({\r\n            name: place,\r\n            link\r\n        });\r\n    }\r\n\r\n    // Обработчик ввода данных в поля\r\n    function handleChange(e) {\r\n\r\n        const { name, value } = e.target;\r\n        setFormValues((prevState) => ({ ...prevState, [name]: value }));\r\n\r\n        // если аттрибут name имеет значение name, то устанавливаем setPlace\r\n        // иначе setLink\r\n        e.target.name === \"name\" ?\r\n            setPlace(e.target.value) :\r\n            setLink(e.target.value);\r\n    }\r\n\r\n    // Если попап закрыли, то очищаем поля, если открыли, устанавливаем\r\n    useEffect(() => {\r\n\r\n        if (isAddPlacePopupOpen) {\r\n            placeRef.current.value = '';\r\n            linkRef.current.value = '';\r\n            setFormValues({\r\n                name: '',\r\n                link: ''\r\n            });\r\n        }\r\n\r\n    }, [isAddPlacePopupOpen]);\r\n\r\n    // Вызов валидации полей при каждом изменении formValues\r\n    useEffect(() => {\r\n        const { allErrors, isInvalid } = onValidation(formValues);\r\n        setError(() => { return allErrors });\r\n        setIsInvalid(isInvalid);\r\n\r\n    }, [formValues, onValidation]);\r\n\r\n    return (\r\n        <PopupWithForm\r\n            name=\"add-card\"\r\n            title=\"Новое место\"\r\n            btnName=\"Создать\"\r\n            isOpen={isOpen}\r\n            onClose={onClose}\r\n            onSubmit={handleAddPlaceSubmit}\r\n            isLoading={isLoading}\r\n            isInvalid={isInvalid}\r\n            popupRef={popupRef}\r\n        >\r\n            <InputAddCard\r\n                onChange={handleChange}\r\n                error={error}\r\n                placeRef={placeRef}\r\n                linkRef={linkRef}\r\n            />\r\n        </PopupWithForm>\r\n    );\r\n});\r\n\r\nexport default AddCardPopup;","import React from 'react';\r\nimport PopupWithForm from './PopupWithForm';\r\n\r\nconst DelCardPopup = React.memo(({ isOpen, onClose, onDelCard, card, isLoading, popupRef }) => {\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        onDelCard(card);\r\n    }\r\n\r\n    return (\r\n        <PopupWithForm\r\n            name=\"confirm-delete\"\r\n            title=\"Вы уверены?\"\r\n            btnName=\"Да\"\r\n            isOpen={isOpen}\r\n            onClose={onClose}\r\n            onSubmit={handleSubmit}\r\n            isLoading={isLoading}\r\n            popupRef={popupRef}\r\n        >\r\n        </PopupWithForm>\r\n    );\r\n}\r\n);\r\n\r\nexport default DelCardPopup;","function BlockAction({ isLoadingOpen }) {\r\n    return (\r\n\r\n        <div className=\"block-action block-action_active\">\r\n            {isLoadingOpen && <div className='spinner'></div >}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BlockAction;","class Api {\r\n    constructor({ baseUrl, headers }) {\r\n        this._baseUrl = baseUrl;\r\n        this._headers = headers;\r\n        this._errorServer = document.querySelector(\".error-server\");\r\n    }\r\n\r\n    // Получение ответа от сервера, иначе ошибка\r\n    _getResponseData(res) {\r\n        if (res.ok) { return res.json(); }\r\n        return Promise.reject(new Error(`Ошибка: ${res.status}`)); // если ошибка при запросе, переходим к catch\r\n    }\r\n\r\n    // Получение с сервера начальных карточек \r\n    getInitialCards() {\r\n        return fetch(`${this._baseUrl}/cards`, { headers: this._headers })\r\n            .then(res => { return this._getResponseData(res); })\r\n    }\r\n\r\n    // Сохранение на сервере карточки\r\n    saveCardToServer({ name, link }) {\r\n        return fetch(`${this._baseUrl}/cards`, {\r\n            headers: this._headers,\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                name: name,\r\n                link: link\r\n            })\r\n        })\r\n            .then((res) => { return this._getResponseData(res); })\r\n    }\r\n\r\n    // Удаление на сервере карточки\r\n    deleteCardToServer(card) {\r\n        return fetch(`${this._baseUrl}/cards/${card._id}`, {\r\n            headers: this._headers,\r\n            method: 'DELETE'\r\n        })\r\n    }\r\n\r\n    // Обновление лайка\r\n    changeLikeCardStatus(card, isLiked) {\r\n        const action = isLiked ? 'DELETE' : 'PUT';\r\n\r\n        return fetch(`${this._baseUrl}/cards/likes/${card._id}`, {\r\n            headers: this._headers,\r\n            method: action\r\n        })\r\n            .then((res) => { return this._getResponseData(res); })\r\n    }\r\n\r\n    // Сохранение на сервере Аватара \r\n    saveAvatarToServer({ link }) {\r\n        return fetch(`${this._baseUrl}/users/me/avatar`, {\r\n            headers: this._headers,\r\n            method: 'PATCH',\r\n            body: JSON.stringify({\r\n                avatar: link\r\n            })\r\n        })\r\n            .then((res) => { return this._getResponseData(res); })\r\n    }\r\n\r\n    // Получение с сервера информация о пользователе \r\n    getUserInfoFromServer() {\r\n        return fetch(`${this._baseUrl}/users/me`, { headers: this._headers })\r\n            .then(res => { return this._getResponseData(res); })\r\n    }\r\n\r\n    // Сохранение на сервере информация о пользователе \r\n    saveUserInfoToServer({ name, about }) {\r\n        return fetch(`${this._baseUrl}/users/me`, {\r\n            headers: this._headers,\r\n            method: 'PATCH',\r\n            body: JSON.stringify({\r\n                name: name,\r\n                about: about\r\n            })\r\n        })\r\n            .then(res => { return this._getResponseData(res); })\r\n    }\r\n\r\n    // Вывод ошибки запроса к серверу на страницу\r\n    setErrorServer(err) {\r\n        this._errorServer.textContent = `Ошибка при соединение с сервером: ${err}. Попробуйте повторить позже`;\r\n\r\n        this._errorServer.classList.add('error-server_active');\r\n        setTimeout(() => {\r\n            this._errorServer.classList.remove('error-server_active');\r\n        }, 8000)\r\n    }\r\n}\r\n\r\nexport const api = new Api({\r\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-16',\r\n    headers: {\r\n        authorization: '4b2550a1-9754-487b-87bb-c51dfc845f43',\r\n        'Content-Type': 'application/json'\r\n    },\r\n});","// Объект с проверками для каждого поля\r\nexport const validators = {\r\n    name: {\r\n        required: (value) => { return value === '' },\r\n        minLength: (value) => { return value.length < 2 }\r\n    },\r\n    about: {\r\n        required: (value) => { return value === '' },\r\n        minLength: (value) => { return value.length < 2 }\r\n    },\r\n    link: {\r\n        required: (value) => { return value === '' },\r\n        http: (value) => { return httpCheck(value) }\r\n    },\r\n    avatar: {\r\n        required: (value) => { return value === '' },\r\n        http: (value) => { return httpCheck(value) }\r\n    }\r\n};\r\n\r\nfunction httpCheck(value) {\r\n    return !(/(^https?:\\/\\/)?[a-z0-9~_\\-\\.]+\\.[a-z]{2,9}(\\/|:|\\?[!-~]*)?$/i).test(value);\r\n}","import React, { useEffect, useRef, useState } from 'react';\r\nimport Header from './Header';\r\nimport Main from './Main';\r\nimport Footer from './Footer';\r\nimport PopupWithImage from './PopupWithImage';\r\nimport EditProfilePopup from './EditProfilePopup';\r\nimport EditAvatarPopup from './EditAvatarPopup';\r\nimport AddCardPopup from './AddCardPopup';\r\nimport DelCardPopup from './DelCardPopup';\r\nimport BlockAction from './BlockAction';\r\n\r\nimport { api } from '../utils/api';\r\nimport { validators } from '../utils/validators';\r\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\r\nimport { StatePopup } from '../contexts/StatePopup';\r\n\r\nfunction App() {\r\n  // Устанавливаем стэйты\r\n  const [currentUser, setCurrentUser] = useState({}); // состояние пользователя\r\n\r\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = useState(false); //состояния попапов\r\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = useState(false);\r\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = useState(false);\r\n  const [isDelCardPopupOpen, setIsDelCardPopupOpen] = useState(false);\r\n\r\n  const [cardToDel, setCardToDel] = useState({}); // состояние карточки, которую удаляют\r\n  const [selectedCard, setSelectedCard] = useState({}); //состояние карточки, по которой кликнули\r\n  const [isLoading, setIsLoading] = useState(false); // состояние спиннера\r\n  const [isLoadingOpen, setIsLoadingOpen] = useState(false); /* состояние спиннера\r\n    при открытии сайта, иначе спиннер дублируется на блоке и на кнопке*/\r\n\r\n  const [cards, setCards] = useState([]); // состояние массива карточек\r\n\r\n  // рефы на попапы для клика по оверлею\r\n  const editProfileRef = useRef();\r\n  const editAvatarRef = useRef();\r\n  const addCardRef = useRef();\r\n  const delCardRef = useRef();\r\n  const imageRef = useRef();\r\n\r\n  // Общая валидация для полей\r\n  function handleValidation(inputValues) {\r\n\r\n    // Преобразовывем объект с полями в объект с булевыми значениями и возвращаем этот объект\r\n    const formKeys = Object.keys(inputValues);\r\n    const allErrors = formKeys.map((key) => {\r\n      const valueByKey = inputValues[key];\r\n\r\n      if (!validators[key]) return {};\r\n\r\n      const errors = Object.entries(validators[key]).map(([errorKey, validatorFn]) => {\r\n\r\n        return { [errorKey]: validatorFn(valueByKey) };\r\n      }).reduce((acc, item) => ({ ...acc, ...item }), {});\r\n\r\n      return { [key]: errors };\r\n    }).reduce((acc, item) => ({ ...acc, ...item }), {});\r\n\r\n    // Если хоть одна проверка возвращает true, то блокируем кнопку\r\n    let isInvalid = false;\r\n    for (const keyInput in allErrors) {\r\n      for (const keyCheck in allErrors[keyInput]) {\r\n        if (allErrors[keyInput][keyCheck]) {\r\n          isInvalid = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return { allErrors, isInvalid };\r\n  }\r\n\r\n  // Используем хук для получения инфы о пользователе и карточек\r\n  useEffect(() => {\r\n    setIsLoadingOpen(true);\r\n    Promise.all([\r\n      api.getUserInfoFromServer(), //получаем данные о пользователе\r\n      api.getInitialCards() // Получаем массив карточек\r\n    ])\r\n      .then((data) => {\r\n        const [userData, cardsData] = data;\r\n        setCurrentUser(userData); //меняем состояния \r\n        setCards(cardsData);\r\n        setIsLoadingOpen(false);\r\n      })\r\n      .catch((err) => { api.setErrorServer(err); })\r\n  }, []);\r\n\r\n  // Обработчик клика по лайку\r\n  function handleCardLike(card) {\r\n    // Проверяем, есть ли уже лайк на этой карточке\r\n    const isLiked = card.likes.some(like => like._id === currentUser._id);\r\n\r\n    // Отправляем запрос в API и получаем обновлённые данные карточки\r\n    api.changeLikeCardStatus(card, isLiked)\r\n      .then((newCard) => {\r\n        // Формируем новый массив на основе имеющегося, подставляя в него новую карточку\r\n        const newCards = cards.map((c) => c._id === card._id ? newCard : c);\r\n        setCards(newCards);  // Обновляем стейт\r\n      })\r\n      .catch((err) => { api.setErrorServer(err); });\r\n  }\r\n\r\n  // Обработчик кнопки удаления карточки\r\n  function handleCardDelete(cardToDel) {\r\n    setIsLoading(true); //ставим блок и спиннер\r\n    // Отправляем запрос в API и получаем обновлённые данные карточки\r\n    api.deleteCardToServer(cardToDel)\r\n      .then(() => {\r\n        // Формируем новый массив на основе имеющегося, если ИД совпадает с ИД \r\n        // удаляемой карточки, то она не должна попасть в новый массив\r\n        const newCards = cards.filter((c) => c._id !== cardToDel._id && c);\r\n        setCards(newCards);  // Обновляем стейт\r\n      })\r\n      .catch((err) => { api.setErrorServer(err); })\r\n      .finally(() => {\r\n        setIsLoading(false);  //убираем блок и спиннер\r\n        closeAllPopups();\r\n      });\r\n  }\r\n\r\n  // Обработчик кнопки Сохранить в попапе редактирования профиля\r\n  function handleUpdateUser(inputValues) {\r\n    setIsLoading(true);\r\n    api.saveUserInfoToServer(inputValues)   // Сохраняем на сервере\r\n      .then((userData) => { setCurrentUser(userData) }) // устанавливаем новый стэйт: новые данные пользователя\r\n      .catch((err) => { api.setErrorServer(err); })\r\n      .finally(() => {\r\n        setIsLoading(false);\r\n        closeAllPopups();\r\n      });\r\n  }\r\n\r\n  // Обработчик кнопки Сохранить в попапе редактирования аватара\r\n  function handleUpdateAvatar(avatar) {\r\n    setIsLoading(true);\r\n    api.saveAvatarToServer(avatar)   // Сохраняем на сервере\r\n      .then((userData) => { setCurrentUser(userData) }) // устанавливаем новый стэйт: новый аватар\r\n      .catch((err) => { api.setErrorServer(err); })\r\n      .finally(() => {\r\n        setIsLoading(false);\r\n        closeAllPopups();\r\n      });\r\n  }\r\n\r\n  // Обработчик кнопки Создать в попапе добавления карточки\r\n  function handleAddPlace(newCard) {\r\n    setIsLoading(true);\r\n    api.saveCardToServer(newCard)   // Сохраняем на сервере\r\n      .then((newCard) => { setCards([newCard, ...cards]) }) // Обновляем массив с карточками, добавляем загруженную\r\n      .catch((err) => { api.setErrorServer(err); })\r\n      .finally(() => {\r\n        setIsLoading(false);\r\n        closeAllPopups();\r\n      });\r\n  }\r\n\r\n  // Обработчики открытия попапов\r\n  function handleEditAvatarClick() {\r\n    setIsEditAvatarPopupOpen(true);\r\n  }\r\n\r\n  function handleEditProfileClick() {\r\n    setIsEditProfilePopupOpen(true);\r\n  }\r\n\r\n  function handleAddPlaceClick() {\r\n    setIsAddPlacePopupOpen(true);\r\n  }\r\n\r\n  function handleDelCardPopup(card) {\r\n    setIsDelCardPopupOpen(true);\r\n    setCardToDel(card);\r\n  }\r\n\r\n  function handleCardClick(card) {\r\n    setSelectedCard(card);\r\n  }\r\n\r\n  // Обработчик нажатия Esc\r\n  function handleEsc(e) {\r\n    if (e.key === \"Escape\") {\r\n      closeAllPopups();\r\n    }\r\n  }\r\n\r\n  // Обработчик клика по оверлею при открытом попапе\r\n  function handleClickOverlay(e) {\r\n    if (\r\n      e.target === editProfileRef.current ||\r\n      e.target === editAvatarRef.current ||\r\n      e.target === addCardRef.current ||\r\n      e.target === delCardRef.current ||\r\n      e.target === imageRef.current) {\r\n      closeAllPopups();\r\n    }\r\n  }\r\n\r\n  // Обработчик закрытия попапов\r\n  function closeAllPopups() {\r\n    setIsEditAvatarPopupOpen(false);\r\n    setIsEditProfilePopupOpen(false);\r\n    setIsAddPlacePopupOpen(false);\r\n    setIsDelCardPopupOpen(false);\r\n    setSelectedCard({});\r\n  }\r\n\r\n  // Объект с состояниями попапов\r\n  const popupStateContext = {\r\n    isEditProfilePopupOpen,\r\n    isEditAvatarPopupOpen,\r\n    isAddPlacePopupOpen\r\n  }\r\n\r\n  return (\r\n    // Делаем доступным контекст currentUser и состояние попапов\r\n    <StatePopup.Provider value={popupStateContext}>\r\n      <CurrentUserContext.Provider value={currentUser}>\r\n        <div className=\"page\" onKeyUp={handleEsc} onClick={handleClickOverlay} >\r\n          <Header />\r\n\r\n          {/*Создаем компонент Main и передаем обработчики через пропсы*/}\r\n          <Main\r\n            onEditProfile={handleEditProfileClick}\r\n            onEditAvatar={handleEditAvatarClick}\r\n            onAddPlace={handleAddPlaceClick}\r\n            onCardClick={handleCardClick} // Обработчик клика по карточке\r\n            cards={cards}\r\n            onCardLike={handleCardLike}\r\n            onCardDelete={handleDelCardPopup}\r\n            isLoading={isLoading}\r\n          />\r\n\r\n          <Footer />\r\n\r\n          {/*Создаем попап для аватара и передаем пропсы и обработчики*/}\r\n          <EditAvatarPopup\r\n            isOpen={isEditAvatarPopupOpen}\r\n            onClose={closeAllPopups}\r\n            onUpdateAvatar={handleUpdateAvatar}\r\n            isLoading={isLoading}\r\n            onValidation={handleValidation}\r\n            popupRef={editAvatarRef}\r\n          />\r\n\r\n          {/*Создаем попап для профиля и передаем пропсы и обработчики*/}\r\n          <EditProfilePopup\r\n            isOpen={isEditProfilePopupOpen}\r\n            onClose={closeAllPopups}\r\n            onUpdateUser={handleUpdateUser}\r\n            isLoading={isLoading}\r\n            onValidation={handleValidation}\r\n            popupRef={editProfileRef}\r\n          />\r\n\r\n          {/*Создаем попап для новой карточки и передаем пропсы и обработчики*/}\r\n          <AddCardPopup\r\n            isOpen={isAddPlacePopupOpen}\r\n            onClose={closeAllPopups}\r\n            onAddPlace={handleAddPlace}\r\n            isLoading={isLoading}\r\n            onValidation={handleValidation}\r\n            popupRef={addCardRef}\r\n          />\r\n\r\n          {/*Создаем попап для подтверждения удаления карточки и передаем пропсы и обработчики*/}\r\n          <DelCardPopup\r\n            isOpen={isDelCardPopupOpen}\r\n            onClose={closeAllPopups}\r\n            onDelCard={handleCardDelete}\r\n            card={cardToDel}\r\n            isLoading={isLoading}\r\n            popupRef={delCardRef}\r\n          >\r\n          </DelCardPopup>\r\n\r\n          {/*Создаем попап с картинкой и передаем пропсы и обработчики*/}\r\n          <PopupWithImage\r\n            card={selectedCard}\r\n            onClose={closeAllPopups}\r\n            popupRef={imageRef}\r\n          />\r\n\r\n          {/*Если isLoading=true, то ставим блок, чтобы пользователь не мог что то поменять*/}\r\n          {(isLoadingOpen || isLoading) && <BlockAction isLoadingOpen={isLoadingOpen} />}\r\n\r\n        </div>\r\n      </CurrentUserContext.Provider>\r\n    </StatePopup.Provider>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './pages/index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}